use core::marker::PhantomData;

use crate::{virtmem::KernPointer, X86Default};

pub struct Blanked {}
pub struct Unblanked {}

pub trait MixedRegisterState {}
impl MixedRegisterState for Blanked {}
impl MixedRegisterState for Unblanked {}
pub struct VGAMixedRegister<STATE: MixedRegisterState> {
    data_and_ind_write: KernPointer<u8>,
    data_read: KernPointer<u8>,
    control: KernPointer<u8>,
    p: PhantomData<STATE>,
}

impl<STATE: MixedRegisterState> VGAMixedRegister<STATE> {
    unsafe fn typestate_transmute<NewState: MixedRegisterState>(self) -> VGAMixedRegister<NewState> {
        VGAMixedRegister::<NewState> {
            data_and_ind_write: self.data_and_ind_write,
            data_read: self.data_read,
            control: self.control,
            p: PhantomData,
        }
    }
}

impl VGAMixedRegister<Blanked> {
    pub unsafe fn write(&mut self, index: u8, data: u8) {
        self.control.read(); // Go to index state
        self.data_and_ind_write.write(index);
        self.data_and_ind_write.write(data);
    }

    pub unsafe fn read(&mut self, index: u8) -> u8 {
        self.control.read(); // Go to index state
        self.data_and_ind_write.write(index);
        self.data_read.read()
    }

    pub unsafe fn unblank_screen(mut self) -> VGAMixedRegister<Unblanked> {
        self.control.read();
        self.data_and_ind_write.write(self.data_and_ind_write.read() | 0x20);
        self.typestate_transmute::<Unblanked>()
    }
}

impl VGAMixedRegister<Unblanked> {
    pub unsafe fn blank_screen(mut self) -> VGAMixedRegister<Blanked> {
        self.control.read();
        self.data_and_ind_write.write(self.data_and_ind_write.read() & (0x20 ^ 0xFF));
        self.typestate_transmute::<Blanked>()
    }
}

pub struct VGAMiscOutputRegister {
    reading: KernPointer<u8>,
    writing: KernPointer<u8>,
}

impl VGAMiscOutputRegister {
    #[inline(always)]
    pub unsafe fn write(&mut self, data: u8) {
        self.writing.write(data);
    }

    #[inline(always)]
    pub unsafe fn read(&self) -> u8 {
        self.reading.read()
    }
}

pub struct VGARegisterSpace {
    index_ptr: KernPointer<u8>,
    data_ptr: KernPointer<u8>,
}

impl VGARegisterSpace {
    unsafe fn new(p: KernPointer<u8>) -> Self {
        Self { index_ptr: p, data_ptr: p.offset(1) }
    }
    pub unsafe fn write(&mut self, index: u8, data: u8) {
        self.index_ptr.write(index);
        self.data_ptr.write(data);
    }

    pub unsafe fn read(&mut self, index: u8) -> u8 {
        self.index_ptr.write(index);
        self.data_ptr.read()
    }
}

pub struct VgaDac {
    pub dac_mask: KernPointer<u8>,
    pub dac_index_to_write_to: KernPointer<u8>,
    pub dac_index_to_read_from: KernPointer<u8>,
    pub dac_data: KernPointer<u8>,
}

impl VgaDac {
    pub unsafe fn read(&mut self, index: u8) -> (u8, u8, u8) {
        self.dac_index_to_read_from.write(index);
        (self.dac_data.read(), self.dac_data.read(), self.dac_data.read())
    }
    pub unsafe fn write(&mut self, index: u8, data: (u8, u8, u8)) {
        self.dac_index_to_write_to.write(index);
        self.dac_data.write(data.0);
        self.dac_data.write(data.1);
        self.dac_data.write(data.2);
    }

    pub unsafe fn write_bulk(&mut self, start_index: u8, data: &[(u8, u8, u8)]) {
        self.dac_index_to_write_to.write(start_index);
        for c in data {
            self.dac_data.write(c.0);
            self.dac_data.write(c.1);
            self.dac_data.write(c.2);
        }
    }
    unsafe fn read_mask(&self) -> u8 {
        self.dac_mask.read()
    }
}

pub struct VgaRegisterDump {
    pub attribute_controller_registers_mixed: [u8; 256],
    pub misc_register: u8,
    pub sequencer_registers: [u8; 256],
    pub graphics_controller_registers: [u8; 256],
    pub crtc_controller_registers: [u8; 256],
    pub dac_mask: u8,
    pub dac_data: [(u8, u8, u8); 256],
}

impl Default for VgaRegisterDump {
    fn default() -> Self {
        Self {
            attribute_controller_registers_mixed: [0; 256],
            misc_register: 0,
            sequencer_registers: [0; 256],
            graphics_controller_registers: [0; 256],
            crtc_controller_registers: [0; 256],
            dac_mask: 0,
            dac_data: [(0, 0, 0); 256],
        }
    }
}

struct VgaModeDump {
    misc_register: u8,
    attribute_controller_registers_mixed: &'static [(u8, u8)],
    sequencer_registers: &'static [(u8, u8)],
    graphics_controller_registers: &'static [(u8, u8)],
    crtc_controller_registers: &'static [(u8, u8)],
}

const TEXT_80X25: VgaModeDump = VgaModeDump {
    misc_register: 0x67,
    sequencer_registers: &[(0x0, 0x03), (0x1, 0x00), (0x2, 0x03), (0x3, 0x00), (0x4, 0x02)],
    crtc_controller_registers: &[
        (0x00, 0x5F),
        (0x01, 0x4F),
        (0x02, 0x50),
        (0x03, 0x82),
        (0x04, 0x55),
        (0x05, 0x81),
        (0x06, 0xBF),
        (0x07, 0x1F),
        (0x08, 0x00),
        (0x09, 0x4F),
        (0x0A, 0x0D),
        (0x0B, 0x0E),
        (0x0C, 0x00),
        (0x0D, 0x00),
        (0x0E, 0x00),
        (0x0F, 0x50),
        (0x10, 0x9C),
        (0x11, 0x0E),
        (0x12, 0x8F),
        (0x13, 0x28),
        (0x14, 0x1F),
        (0x15, 0x96),
        (0x16, 0xB9),
        (0x17, 0xA3),
        (0x18, 0xFF),
    ],
    attribute_controller_registers_mixed: &[
        (0x00, 0x00),
        (0x01, 0x01),
        (0x02, 0x02),
        (0x03, 0x03),
        (0x04, 0x04),
        (0x05, 0x05),
        (0x06, 0x14),
        (0x07, 0x07),
        (0x08, 0x38),
        (0x09, 0x39),
        (0x0A, 0x3A),
        (0x0B, 0x3B),
        (0x0C, 0x3C),
        (0x0D, 0x3D),
        (0x0E, 0x3E),
        (0x0F, 0x3F),
        (0x10, 0x0C),
        (0x11, 0x00),
        (0x12, 0x0F),
        (0x13, 0x08),
        (0x14, 0x00),
    ],
    graphics_controller_registers: &[
        (0x00, 0x00),
        (0x01, 0x00),
        (0x02, 0x00),
        (0x03, 0x00),
        (0x04, 0x00),
        (0x05, 0x10),
        (0x06, 0x0E),
        (0x07, 0x00),
        (0x08, 0xFF),
    ],
};

const COLOR_320X200: VgaModeDump = VgaModeDump {
    misc_register: 0x63,
    sequencer_registers: &[(0x00, 0x03), (0x1, 0x01), (0x2, 0x0F), (0x3, 0x00), (0x4, 0x0E)],
    crtc_controller_registers: &[
        (0x00, 0x5F),
        (0x01, 0x4F),
        (0x02, 0x50),
        (0x03, 0x82),
        (0x04, 0x54),
        (0x05, 0x80),
        (0x06, 0xBF),
        (0x07, 0x1F),
        (0x08, 0x00),
        (0x09, 0x41),
        (0x0A, 0x00),
        (0x0B, 0x00),
        (0x0C, 0x00),
        (0x0D, 0x00),
        (0x0E, 0x00),
        (0x0F, 0x00),
        (0x10, 0x9C),
        (0x11, 0x0E),
        (0x12, 0x8F),
        (0x13, 0x28),
        (0x14, 0x40),
        (0x15, 0x96),
        (0x16, 0xB9),
        (0x17, 0xA3),
        (0x18, 0xFF),
    ],
    attribute_controller_registers_mixed: &[(0x10, 0x41), (0x11, 0x00), (0x12, 0x0F), (0x13, 0x00), (0x14, 0x00)],
    graphics_controller_registers: &[
        (0x0, 0x0),
        (0x1, 0x0),
        (0x2, 0x0),
        (0x3, 0x0),
        (0x4, 0x0),
        (0x05, 0x40),
        (0x06, 0x05),
        (0x7, 0x0F),
    ],
};

pub const FANCY_PALETTE: [(u8, u8, u8); 256] = [
    (0x0, 0x0, 0x0),
    (0x0, 0x0, 0xc),
    (0x0, 0x0, 0x18),
    (0x0, 0x0, 0x24),
    (0x0, 0x0, 0x30),
    (0x0, 0x0, 0x3c),
    (0x0, 0xa, 0x0),
    (0x0, 0xa, 0xc),
    (0x0, 0xa, 0x18),
    (0x0, 0xa, 0x24),
    (0x0, 0xa, 0x30),
    (0x0, 0xa, 0x3c),
    (0x0, 0x14, 0x0),
    (0x0, 0x14, 0xc),
    (0x0, 0x14, 0x18),
    (0x0, 0x14, 0x24),
    (0x0, 0x14, 0x30),
    (0x0, 0x14, 0x3c),
    (0x0, 0x1e, 0x0),
    (0x0, 0x1e, 0xc),
    (0x0, 0x1e, 0x18),
    (0x0, 0x1e, 0x24),
    (0x0, 0x1e, 0x30),
    (0x0, 0x1e, 0x3c),
    (0x0, 0x28, 0x0),
    (0x0, 0x28, 0xc),
    (0x0, 0x28, 0x18),
    (0x0, 0x28, 0x24),
    (0x0, 0x28, 0x30),
    (0x0, 0x28, 0x3c),
    (0x0, 0x32, 0x0),
    (0x0, 0x32, 0xc),
    (0x0, 0x32, 0x18),
    (0x0, 0x32, 0x24),
    (0x0, 0x32, 0x30),
    (0x0, 0x32, 0x3c),
    (0x0, 0x3c, 0x0),
    (0x0, 0x3c, 0xc),
    (0x0, 0x3c, 0x18),
    (0x0, 0x3c, 0x24),
    (0x0, 0x3c, 0x30),
    (0x0, 0x3c, 0x3c),
    (0xc, 0x0, 0x0),
    (0xc, 0x0, 0xc),
    (0xc, 0x0, 0x18),
    (0xc, 0x0, 0x24),
    (0xc, 0x0, 0x30),
    (0xc, 0x0, 0x3c),
    (0xc, 0xa, 0x0),
    (0xc, 0xa, 0xc),
    (0xc, 0xa, 0x18),
    (0xc, 0xa, 0x24),
    (0xc, 0xa, 0x30),
    (0xc, 0xa, 0x3c),
    (0xc, 0x14, 0x0),
    (0xc, 0x14, 0xc),
    (0xc, 0x14, 0x18),
    (0xc, 0x14, 0x24),
    (0xc, 0x14, 0x30),
    (0xc, 0x14, 0x3c),
    (0xc, 0x1e, 0x0),
    (0xc, 0x1e, 0xc),
    (0xc, 0x1e, 0x18),
    (0xc, 0x1e, 0x24),
    (0xc, 0x1e, 0x30),
    (0xc, 0x1e, 0x3c),
    (0xc, 0x28, 0x0),
    (0xc, 0x28, 0xc),
    (0xc, 0x28, 0x18),
    (0xc, 0x28, 0x24),
    (0xc, 0x28, 0x30),
    (0xc, 0x28, 0x3c),
    (0xc, 0x32, 0x0),
    (0xc, 0x32, 0xc),
    (0xc, 0x32, 0x18),
    (0xc, 0x32, 0x24),
    (0xc, 0x32, 0x30),
    (0xc, 0x32, 0x3c),
    (0xc, 0x3c, 0x0),
    (0xc, 0x3c, 0xc),
    (0xc, 0x3c, 0x18),
    (0xc, 0x3c, 0x24),
    (0xc, 0x3c, 0x30),
    (0xc, 0x3c, 0x3c),
    (0x18, 0x0, 0x0),
    (0x18, 0x0, 0xc),
    (0x18, 0x0, 0x18),
    (0x18, 0x0, 0x24),
    (0x18, 0x0, 0x30),
    (0x18, 0x0, 0x3c),
    (0x18, 0xa, 0x0),
    (0x18, 0xa, 0xc),
    (0x18, 0xa, 0x18),
    (0x18, 0xa, 0x24),
    (0x18, 0xa, 0x30),
    (0x18, 0xa, 0x3c),
    (0x18, 0x14, 0x0),
    (0x18, 0x14, 0xc),
    (0x18, 0x14, 0x18),
    (0x18, 0x14, 0x24),
    (0x18, 0x14, 0x30),
    (0x18, 0x14, 0x3c),
    (0x18, 0x1e, 0x0),
    (0x18, 0x1e, 0xc),
    (0x18, 0x1e, 0x18),
    (0x18, 0x1e, 0x24),
    (0x18, 0x1e, 0x30),
    (0x18, 0x1e, 0x3c),
    (0x18, 0x28, 0x0),
    (0x18, 0x28, 0xc),
    (0x18, 0x28, 0x18),
    (0x18, 0x28, 0x24),
    (0x18, 0x28, 0x30),
    (0x18, 0x28, 0x3c),
    (0x18, 0x32, 0x0),
    (0x18, 0x32, 0xc),
    (0x18, 0x32, 0x18),
    (0x18, 0x32, 0x24),
    (0x18, 0x32, 0x30),
    (0x18, 0x32, 0x3c),
    (0x18, 0x3c, 0x0),
    (0x18, 0x3c, 0xc),
    (0x18, 0x3c, 0x18),
    (0x18, 0x3c, 0x24),
    (0x18, 0x3c, 0x30),
    (0x18, 0x3c, 0x3c),
    (0x24, 0x0, 0x0),
    (0x24, 0x0, 0xc),
    (0x24, 0x0, 0x18),
    (0x24, 0x0, 0x24),
    (0x24, 0x0, 0x30),
    (0x24, 0x0, 0x3c),
    (0x24, 0xa, 0x0),
    (0x24, 0xa, 0xc),
    (0x24, 0xa, 0x18),
    (0x24, 0xa, 0x24),
    (0x24, 0xa, 0x30),
    (0x24, 0xa, 0x3c),
    (0x24, 0x14, 0x0),
    (0x24, 0x14, 0xc),
    (0x24, 0x14, 0x18),
    (0x24, 0x14, 0x24),
    (0x24, 0x14, 0x30),
    (0x24, 0x14, 0x3c),
    (0x24, 0x1e, 0x0),
    (0x24, 0x1e, 0xc),
    (0x24, 0x1e, 0x18),
    (0x24, 0x1e, 0x24),
    (0x24, 0x1e, 0x30),
    (0x24, 0x1e, 0x3c),
    (0x24, 0x28, 0x0),
    (0x24, 0x28, 0xc),
    (0x24, 0x28, 0x18),
    (0x24, 0x28, 0x24),
    (0x24, 0x28, 0x30),
    (0x24, 0x28, 0x3c),
    (0x24, 0x32, 0x0),
    (0x24, 0x32, 0xc),
    (0x24, 0x32, 0x18),
    (0x24, 0x32, 0x24),
    (0x24, 0x32, 0x30),
    (0x24, 0x32, 0x3c),
    (0x24, 0x3c, 0x0),
    (0x24, 0x3c, 0xc),
    (0x24, 0x3c, 0x18),
    (0x24, 0x3c, 0x24),
    (0x24, 0x3c, 0x30),
    (0x24, 0x3c, 0x3c),
    (0x30, 0x0, 0x0),
    (0x30, 0x0, 0xc),
    (0x30, 0x0, 0x18),
    (0x30, 0x0, 0x24),
    (0x30, 0x0, 0x30),
    (0x30, 0x0, 0x3c),
    (0x30, 0xa, 0x0),
    (0x30, 0xa, 0xc),
    (0x30, 0xa, 0x18),
    (0x30, 0xa, 0x24),
    (0x30, 0xa, 0x30),
    (0x30, 0xa, 0x3c),
    (0x30, 0x14, 0x0),
    (0x30, 0x14, 0xc),
    (0x30, 0x14, 0x18),
    (0x30, 0x14, 0x24),
    (0x30, 0x14, 0x30),
    (0x30, 0x14, 0x3c),
    (0x30, 0x1e, 0x0),
    (0x30, 0x1e, 0xc),
    (0x30, 0x1e, 0x18),
    (0x30, 0x1e, 0x24),
    (0x30, 0x1e, 0x30),
    (0x30, 0x1e, 0x3c),
    (0x30, 0x28, 0x0),
    (0x30, 0x28, 0xc),
    (0x30, 0x28, 0x18),
    (0x30, 0x28, 0x24),
    (0x30, 0x28, 0x30),
    (0x30, 0x28, 0x3c),
    (0x30, 0x32, 0x0),
    (0x30, 0x32, 0xc),
    (0x30, 0x32, 0x18),
    (0x30, 0x32, 0x24),
    (0x30, 0x32, 0x30),
    (0x30, 0x32, 0x3c),
    (0x30, 0x3c, 0x0),
    (0x30, 0x3c, 0xc),
    (0x30, 0x3c, 0x18),
    (0x30, 0x3c, 0x24),
    (0x30, 0x3c, 0x30),
    (0x30, 0x3c, 0x3c),
    (0x3c, 0x0, 0x0),
    (0x3c, 0x0, 0xc),
    (0x3c, 0x0, 0x18),
    (0x3c, 0x0, 0x24),
    (0x3c, 0x0, 0x30),
    (0x3c, 0x0, 0x3c),
    (0x3c, 0xa, 0x0),
    (0x3c, 0xa, 0xc),
    (0x3c, 0xa, 0x18),
    (0x3c, 0xa, 0x24),
    (0x3c, 0xa, 0x30),
    (0x3c, 0xa, 0x3c),
    (0x3c, 0x14, 0x0),
    (0x3c, 0x14, 0xc),
    (0x3c, 0x14, 0x18),
    (0x3c, 0x14, 0x24),
    (0x3c, 0x14, 0x30),
    (0x3c, 0x14, 0x3c),
    (0x3c, 0x1e, 0x0),
    (0x3c, 0x1e, 0xc),
    (0x3c, 0x1e, 0x18),
    (0x3c, 0x1e, 0x24),
    (0x3c, 0x1e, 0x30),
    (0x3c, 0x1e, 0x3c),
    (0x3c, 0x28, 0x0),
    (0x3c, 0x28, 0xc),
    (0x3c, 0x28, 0x18),
    (0x3c, 0x28, 0x24),
    (0x3c, 0x28, 0x30),
    (0x3c, 0x28, 0x3c),
    (0x3c, 0x32, 0x0),
    (0x3c, 0x32, 0xc),
    (0x3c, 0x32, 0x18),
    (0x3c, 0x32, 0x24),
    (0x3c, 0x32, 0x30),
    (0x3c, 0x32, 0x3c),
    (0x3c, 0x3c, 0x0),
    (0x3c, 0x3c, 0xc),
    (0x3c, 0x3c, 0x18),
    (0x3c, 0x3c, 0x24),
    (0x3c, 0x3c, 0x30),
    (0x3c, 0x3c, 0x3c),
    (0x3f, 0x3f, 0x3f),
    (0x3f, 0x0, 0x0),
    (0x0, 0x3f, 0x0),
    (0x0, 0x0, 0x3f),
];
pub const DEFAULT_PALETTE: [(u8, u8, u8); 256] = [
    (0x0, 0x0, 0x0),
    (0x0, 0x0, 0x2A),
    (0x0, 0x2A, 0x0),
    (0x0, 0x2A, 0x2A),
    (0x2A, 0x0, 0x0),
    (0x2A, 0x0, 0x2A),
    (0x2A, 0x2A, 0x0),
    (0x2A, 0x2A, 0x2A),
    (0x0, 0x0, 0x15),
    (0x0, 0x0, 0x3F),
    (0x0, 0x2A, 0x15),
    (0x0, 0x2A, 0x3F),
    (0x2A, 0x0, 0x15),
    (0x2A, 0x0, 0x3F),
    (0x2A, 0x2A, 0x15),
    (0x2A, 0x2A, 0x3F),
    (0x0, 0x15, 0x0),
    (0x0, 0x15, 0x2A),
    (0x0, 0x3F, 0x0),
    (0x0, 0x3F, 0x2A),
    (0x2A, 0x15, 0x0),
    (0x2A, 0x15, 0x2A),
    (0x2A, 0x3F, 0x0),
    (0x2A, 0x3F, 0x2A),
    (0x0, 0x15, 0x15),
    (0x0, 0x15, 0x3F),
    (0x0, 0x3F, 0x15),
    (0x0, 0x3F, 0x3F),
    (0x2A, 0x15, 0x15),
    (0x2A, 0x15, 0x3F),
    (0x2A, 0x3F, 0x15),
    (0x2A, 0x3F, 0x3F),
    (0x15, 0x0, 0x0),
    (0x15, 0x00, 0x2A),
    (0x15, 0x2A, 0x00),
    (0x15, 0x2A, 0x2A),
    (0x3F, 0x00, 0x00),
    (0x3F, 0x00, 0x2A),
    (0x3F, 0x2A, 0x00),
    (0x3F, 0x2A, 0x2A),
    (0x15, 0x00, 0x15),
    (0x15, 0x00, 0x3F),
    (0x15, 0x2A, 0x15),
    (0x15, 0x2A, 0x3F),
    (0x3F, 0x00, 0x15),
    (0x3F, 0x00, 0x3F),
    (0x3F, 0x2A, 0x15),
    (0x3F, 0x2A, 0x3F),
    (0x15, 0x15, 0x00),
    (0x15, 0x15, 0x2A),
    (0x15, 0x3F, 0x00),
    (0x15, 0x3F, 0x2A),
    (0x3F, 0x15, 0x00),
    (0x3F, 0x15, 0x2A),
    (0x3F, 0x3F, 0x00),
    (0x3F, 0x3F, 0x2A),
    (0x15, 0x15, 0x15),
    (0x15, 0x15, 0x3F),
    (0x15, 0x3F, 0x15),
    (0x15, 0x3F, 0x3F),
    (0x3F, 0x15, 0x15),
    (0x3F, 0x15, 0x3F),
    (0x3F, 0x3F, 0x15),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
    (0x3F, 0x3F, 0x3F),
];

const TEXT_8X16_FONT: [u8; 4096] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x81,
    0xA5, 0x81, 0x81, 0xBD, 0x99, 0x81, 0x81, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xC3,
    0xE7, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x99, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
    0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C,
    0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x1E, 0x0E,
    0x1A, 0x32, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C,
    0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0,
    0xF0, 0xF8, 0xFE, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0E, 0x1E, 0x3E, 0xFE, 0x3E,
    0x1E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60,
    0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18,
    0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE,
    0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7C, 0xC6,
    0xC2, 0xC0, 0x7C, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18,
    0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF,
    0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18,
    0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xCE, 0xD6, 0xD6, 0xE6, 0xC6, 0xC6, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6,
    0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE,
    0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x0E, 0x06, 0x06, 0xC6, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6,
    0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06,
    0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06,
    0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x66,
    0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0,
    0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66,
    0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6,
    0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE6, 0x66, 0x6C, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x60,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6,
    0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6,
    0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C,
    0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6,
    0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6,
    0xD6, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x6C, 0x38, 0x38, 0x6C, 0x6C, 0xC6, 0xC6,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38,
    0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x30, 0x30, 0x18, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C,
    0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0xDC,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60,
    0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C,
    0x0C, 0xCC, 0x78, 0x00, 0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
    0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78,
    0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66,
    0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C,
    0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
    0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC,
    0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18,
    0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6,
    0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x0C,
    0x06, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C,
    0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0x00, 0x78, 0x0C, 0x7C,
    0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x38, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x0C, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C,
    0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0x7C, 0xC6, 0xFE,
    0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18,
    0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0x10, 0x38, 0x6C, 0xC6, 0xC6,
    0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x38, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xFE, 0x66, 0x60, 0x7C, 0x60, 0x60, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x76, 0x36, 0x7E, 0xD8, 0xD8, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x6C,
    0xCC, 0xCC, 0xFE, 0xCC, 0xCC, 0xCC, 0xCC, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xC6,
    0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18,
    0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0xC6,
    0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x64,
    0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xE6, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,
    0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC4, 0xCC, 0xDE, 0xCC, 0xCC, 0xCC, 0xC6,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1B, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x70, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30,
    0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7C, 0xC6, 0xC6,
    0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x76, 0xDC, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x6C, 0x6C,
    0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xC0, 0xC6, 0xC6, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC2,
    0xC6, 0xCC, 0x18, 0x30, 0x60, 0xCE, 0x93, 0x06, 0x0C, 0x1F, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30,
    0x66, 0xCE, 0x9A, 0x3F, 0x06, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
    0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77,
    0xDD, 0x77, 0xDD, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0xF6,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
    0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18,
    0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0xD8, 0xD8, 0xD8, 0xDC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC6, 0xFC, 0xC6, 0xC6, 0xFC, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC6,
    0xC6, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFE, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC6, 0xFE,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x18, 0x3C, 0x66, 0x66,
    0x66, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x6C, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x6C, 0x6C, 0x6C, 0xEE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x30, 0x18, 0x0C, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7E, 0xDB, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x7E, 0xCF, 0xDB,
    0xF3, 0x7E, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x30, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x30, 0x1C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0C, 0x06, 0x0C,
    0x18, 0x30, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x7E,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00,
    0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0C, 0x0C,
    0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x6C, 0x3C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x98, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

pub trait VgaMode {}

pub struct Color256 {}
impl VgaMode for Color256 {}

pub struct Text80x25 {}
impl VgaMode for Text80x25 {}

pub struct UndefinedVgaMode {}
impl VgaMode for UndefinedVgaMode {}

impl X86Default for Vga<UndefinedVgaMode, Unblanked> {
    unsafe fn x86_default() -> Self {
        Self {
            misc_register: VGAMiscOutputRegister {
                reading: KernPointer::<u8>::from_port(0x3CC),
                writing: KernPointer::<u8>::from_port(0x3C2),
            },
            attribute_controller_registers_mixed: VGAMixedRegister::<Unblanked> {
                data_and_ind_write: KernPointer::<u8>::from_port(0x3C0),
                control: KernPointer::<u8>::from_port(0x3DA),
                data_read: KernPointer::<u8>::from_port(0x3C1),
                p: PhantomData,
            },
            sequencer_registers: VGARegisterSpace::new(KernPointer::<u8>::from_port(0x3C4)),
            graphics_controller_registers: VGARegisterSpace::new(KernPointer::<u8>::from_port(0x3CE)),
            crtc_controller_registers: VGARegisterSpace::new(KernPointer::<u8>::from_port(0x3D4)),
            dac: VgaDac {
                dac_mask: KernPointer::<u8>::from_port(0x3C6),
                dac_data: KernPointer::<u8>::from_port(0x3C9),
                dac_index_to_read_from: KernPointer::<u8>::from_port(0x3C7),
                dac_index_to_write_to: KernPointer::<u8>::from_port(0x3C8),
            },
            video_ram: KernPointer::<u8>::from_mem(0x0 as *mut u8),
            p: PhantomData,
        }
    }
}

pub struct Vga<T: VgaMode, STATE: MixedRegisterState> {
    pub attribute_controller_registers_mixed: VGAMixedRegister<STATE>,
    pub misc_register: VGAMiscOutputRegister,
    pub sequencer_registers: VGARegisterSpace,
    pub graphics_controller_registers: VGARegisterSpace,
    pub crtc_controller_registers: VGARegisterSpace,
    pub dac: VgaDac,
    pub video_ram: KernPointer<u8>,
    p: PhantomData<T>,
}

impl<T: VgaMode + 'static, STATE: MixedRegisterState> Vga<T, STATE> {
    fn typestate_transmute<U: VgaMode>(self) -> Vga<U, STATE> {
        Vga::<U, STATE> {
            attribute_controller_registers_mixed: self.attribute_controller_registers_mixed,
            misc_register: self.misc_register,
            sequencer_registers: self.sequencer_registers,
            graphics_controller_registers: self.graphics_controller_registers,
            crtc_controller_registers: self.crtc_controller_registers,
            dac: self.dac,
            video_ram: self.video_ram,
            p: PhantomData,
        }
    }
}

impl<T: VgaMode> Vga<T, Unblanked> {
    pub unsafe fn blank_screen(self) -> Vga<T, Blanked> {
        Vga::<T, Blanked> {
            attribute_controller_registers_mixed: self.attribute_controller_registers_mixed.blank_screen(),
            misc_register: self.misc_register,
            sequencer_registers: self.sequencer_registers,
            graphics_controller_registers: self.graphics_controller_registers,
            crtc_controller_registers: self.crtc_controller_registers,
            dac: self.dac,
            video_ram: self.video_ram,
            p: PhantomData,
        }
    }
}

impl<T: VgaMode + 'static> Vga<T, Blanked> {
    pub unsafe fn dump_all(&mut self, dump: &mut VgaRegisterDump) {
        dump.misc_register = self.misc_register.read();
        dump.dac_mask = self.dac.read_mask();
        for i in 0_u8..=255_u8 {
            dump.attribute_controller_registers_mixed[usize::from(i)] = self.attribute_controller_registers_mixed.read(i);
            dump.sequencer_registers[usize::from(i)] = self.sequencer_registers.read(i);
            dump.graphics_controller_registers[usize::from(i)] = self.graphics_controller_registers.read(i);
            dump.crtc_controller_registers[usize::from(i)] = self.crtc_controller_registers.read(i);
            dump.dac_data[usize::from(i)] = self.dac.read(i);
        }
    }

    pub unsafe fn set_mode<U: VgaMode + 'static>(mut self) -> Vga<U, Blanked> {
        if core::any::TypeId::of::<U>() == core::any::TypeId::of::<T>() {
            return self.typestate_transmute::<U>();
        }
        if core::any::TypeId::of::<U>() == core::any::TypeId::of::<Text80x25>() {
            self.load_mode_dump(&TEXT_80X25);
            self.dac.write_bulk(0, &DEFAULT_PALETTE); // Reset pallette
            self.load_font(&TEXT_8X16_FONT, 16, 0);
            self.video_ram = KernPointer::<u8>::from_mem(0xb8000 as *mut u8);
            return self.typestate_transmute::<U>();
        }
        if core::any::TypeId::of::<U>() == core::any::TypeId::of::<Color256>() {
            self.load_mode_dump(&COLOR_320X200);
            self.dac.write_bulk(0, &FANCY_PALETTE); // Reset pallette
            self.video_ram = KernPointer::<u8>::from_mem(0xa0000 as *mut u8);
            return self.typestate_transmute::<U>();
        }
        panic!("Invalid vga mode requested!");
    }

    pub unsafe fn unblank_screen(self) -> Vga<T, Unblanked> {
        Vga::<T, Unblanked> {
            attribute_controller_registers_mixed: self.attribute_controller_registers_mixed.unblank_screen(),
            misc_register: self.misc_register,
            sequencer_registers: self.sequencer_registers,
            graphics_controller_registers: self.graphics_controller_registers,
            crtc_controller_registers: self.crtc_controller_registers,
            dac: self.dac,
            video_ram: self.video_ram,
            p: PhantomData,
        }
    }

    unsafe fn load_mode_dump(&mut self, dump: &VgaModeDump) {
        // Note: It's important that the misc_register get loaded before other registers, because it determines the location of the ports of other registers
        self.misc_register.write(dump.misc_register);
        self.unlock_crtc_registers();
        dump.sequencer_registers.iter().for_each(|(index, val)| self.sequencer_registers.write(*index as u8, *val));
        dump.crtc_controller_registers.iter().for_each(|(index, val)| self.crtc_controller_registers.write(*index as u8, *val));
        dump.graphics_controller_registers
            .iter()
            .for_each(|(index, val)| self.graphics_controller_registers.write(*index as u8, *val));
        dump.attribute_controller_registers_mixed
            .iter()
            .for_each(|(index, val)| self.attribute_controller_registers_mixed.write(*index as u8, *val));
    }

    unsafe fn load_font<const SIZE: usize>(&mut self, font: &[u8; SIZE], char_height: u8, offset: isize) {
        let n_chars = SIZE / char_height as usize;
        // Save state
        let seq_mode_odd_even_reg_old = self.sequencer_registers.read(0x04);
        let seq_mask_reg_old = self.sequencer_registers.read(0x02);
        let graphics_mode_old = self.graphics_controller_registers.read(0x05);
        let misc_old = self.graphics_controller_registers.read(0x06);

        // Disable odd/even
        self.sequencer_registers.write(0x04, seq_mode_odd_even_reg_old | 0b100);

        // Switch to flat addressing
        self.graphics_controller_registers.write(0x05, graphics_mode_old & !0x10);
        self.graphics_controller_registers.write(0x06, misc_old & !0x02);

        self.sequencer_registers.write(0x02, 0b100); // Set to write to 2nd plane
                                                     // Now we just load font
        for c_ind in 0..n_chars {
            for row in 0..char_height {
                self.video_ram
                    .offset(32 * c_ind as isize + row as isize + offset)
                    .write(font[c_ind * char_height as usize + row as usize]);
            }
        }
        // Restore state
        self.sequencer_registers.write(0x04, seq_mode_odd_even_reg_old);
        self.sequencer_registers.write(0x02, seq_mask_reg_old);
        self.graphics_controller_registers.write(0x05, graphics_mode_old);
        self.graphics_controller_registers.write(0x06, misc_old);
    }

    unsafe fn unlock_crtc_registers(&mut self) {
        let horizontal_blanking_end = self.crtc_controller_registers.read(0x03);
        self.crtc_controller_registers.write(
            0x03, // HBLANK_END
            horizontal_blanking_end | 0x80,
        );

        let vertical_sync_end = self.crtc_controller_registers.read(0x11);
        self.crtc_controller_registers.write(
            0x11, // VSYNC_END
            vertical_sync_end & 0x7F,
        );
    }
}

impl<STATE: MixedRegisterState> Vga<Text80x25, STATE> {
    #[inline(always)]
    pub unsafe fn write_char(&mut self, x: usize, y: usize, c: u8, color: u8) {
        // DUBIOUS: Yeah lemme just ignore the type this pointer is pointing to real quick :)
        // We could just do 2 writes but then we would have to know the endianess that the vga card expects, which is undefined as far as i'm aware, so by reinterpreting the pointer to point to 2 bytes at atime, we can use the default endianess of the system which might be better, oh and also we have 1 write instead of 2, which again is probably better
        // hey, it works on my machine (literally) ¯\_(ツ)_/¯
        let vram: KernPointer<u16> = core::mem::transmute(self.video_ram);
        vram.offset((y * 80 + x) as isize).write(u16::from_le_bytes([c, color]));
    }

    pub unsafe fn set_cursor_position(&mut self, x: usize, y: usize) {
        let offset = 80 * y + x;
        let cursor_start = offset & 0xFF;
        let cursor_end = (offset >> 8) & 0xFF;
        self.crtc_controller_registers.write(0x0F, cursor_start as u8);
        self.crtc_controller_registers.write(0x0E, cursor_end as u8);
    }
}

impl<STATE: MixedRegisterState> Vga<Color256, STATE> {
    #[inline(always)]
    pub unsafe fn write(&mut self, x: usize, y: usize, pixel_color: u8) {
        let vram: KernPointer<u8> = core::mem::transmute(self.video_ram);
        vram.offset((y * 320 + x) as isize).write(pixel_color);
    }
}
